# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pserver_pb2 as pserver__pb2


class PServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DownloadFile = channel.unary_unary(
                '/PServer/DownloadFile',
                request_serializer=pserver__pb2.File.SerializeToString,
                response_deserializer=pserver__pb2.Reply.FromString,
                )
        self.UploadFile = channel.unary_unary(
                '/PServer/UploadFile',
                request_serializer=pserver__pb2.File.SerializeToString,
                response_deserializer=pserver__pb2.Reply.FromString,
                )
        self.RequestFile = channel.unary_unary(
                '/PServer/RequestFile',
                request_serializer=pserver__pb2.UploadMessage.SerializeToString,
                response_deserializer=pserver__pb2.Reply.FromString,
                )
        self.RequestUpload = channel.unary_unary(
                '/PServer/RequestUpload',
                request_serializer=pserver__pb2.File.SerializeToString,
                response_deserializer=pserver__pb2.Reply.FromString,
                )
        self.RequestLogIn = channel.unary_unary(
                '/PServer/RequestLogIn',
                request_serializer=pserver__pb2.Credentials.SerializeToString,
                response_deserializer=pserver__pb2.Reply.FromString,
                )
        self.RequestLogOut = channel.unary_unary(
                '/PServer/RequestLogOut',
                request_serializer=pserver__pb2.Url.SerializeToString,
                response_deserializer=pserver__pb2.Reply.FromString,
                )
        self.RequestPinging = channel.unary_unary(
                '/PServer/RequestPinging',
                request_serializer=pserver__pb2.Any.SerializeToString,
                response_deserializer=pserver__pb2.Reply.FromString,
                )
        self.ListIndex = channel.unary_unary(
                '/PServer/ListIndex',
                request_serializer=pserver__pb2.Any.SerializeToString,
                response_deserializer=pserver__pb2.Index.FromString,
                )


class PServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DownloadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestUpload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestLogIn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestLogOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestPinging(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DownloadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadFile,
                    request_deserializer=pserver__pb2.File.FromString,
                    response_serializer=pserver__pb2.Reply.SerializeToString,
            ),
            'UploadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=pserver__pb2.File.FromString,
                    response_serializer=pserver__pb2.Reply.SerializeToString,
            ),
            'RequestFile': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestFile,
                    request_deserializer=pserver__pb2.UploadMessage.FromString,
                    response_serializer=pserver__pb2.Reply.SerializeToString,
            ),
            'RequestUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestUpload,
                    request_deserializer=pserver__pb2.File.FromString,
                    response_serializer=pserver__pb2.Reply.SerializeToString,
            ),
            'RequestLogIn': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestLogIn,
                    request_deserializer=pserver__pb2.Credentials.FromString,
                    response_serializer=pserver__pb2.Reply.SerializeToString,
            ),
            'RequestLogOut': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestLogOut,
                    request_deserializer=pserver__pb2.Url.FromString,
                    response_serializer=pserver__pb2.Reply.SerializeToString,
            ),
            'RequestPinging': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestPinging,
                    request_deserializer=pserver__pb2.Any.FromString,
                    response_serializer=pserver__pb2.Reply.SerializeToString,
            ),
            'ListIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.ListIndex,
                    request_deserializer=pserver__pb2.Any.FromString,
                    response_serializer=pserver__pb2.Index.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DownloadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PServer/DownloadFile',
            pserver__pb2.File.SerializeToString,
            pserver__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PServer/UploadFile',
            pserver__pb2.File.SerializeToString,
            pserver__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PServer/RequestFile',
            pserver__pb2.UploadMessage.SerializeToString,
            pserver__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PServer/RequestUpload',
            pserver__pb2.File.SerializeToString,
            pserver__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestLogIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PServer/RequestLogIn',
            pserver__pb2.Credentials.SerializeToString,
            pserver__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestLogOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PServer/RequestLogOut',
            pserver__pb2.Url.SerializeToString,
            pserver__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestPinging(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PServer/RequestPinging',
            pserver__pb2.Any.SerializeToString,
            pserver__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PServer/ListIndex',
            pserver__pb2.Any.SerializeToString,
            pserver__pb2.Index.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
